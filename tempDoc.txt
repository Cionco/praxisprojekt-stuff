///@title Praxisprojekt 2019 Smart contract
///@author Jan Ludwig & Nicolas Kepper
///@notice Takes care of all read and write operations on the blockchain
contract Praxisprojekt {
--
  ///@notice Maps a new Institution Object on the sender's address
  ///@param name Institution's name
  ///@param email Institution's login email
  ///@param password Institution's login password
  ///@return true, if successfully created; false if there's already an institution mapped on the sender's address
  ///@dev not really in use yet, will be important for later steps
  function createInstitution(string memory name, string memory email, string memory password) public returns(bool){
--
  ///@notice Maps a new User Object on the sender's address
  ///@param firstName User's first name
  ///@param lastName User's last name
  ///@param email User's login email
  ///@param password User's login password
  ///@param caCertificate User's certificate that proves that he is who he claims to be
  ///@return true, if successfully created; false if there's already a User mapped on the sender's address
  function createUser(string memory firstName, string memory lastName, string memory email, string memory password, string memory caCertificate) public returns(bool){
--
  ///@notice Checks if credentials match the one's given at registration
  ///@param user Login Username/Email
  ///@param password Login password
  ///@return true, if md5 hashes of usernames/emails and sha256 hashes of passwords match
  function authenticate(string memory user, string memory password) public view returns(bool) {
--
  ///@return the first name of the User mapped to this address
  function getUserFirstName() public view returns (string memory) {
--
  ///@return the last name of the User mapped to this address
  function getUserLastName() public view returns (string memory) {
--
  ///@return the email of the User mapped to this address
  function getUserEmail() public view returns (string memory) {
--
  ///@return the hashed password of the User mapped to this address
  function getUserPassword() public view returns (bytes32) {
--
  ///@return the Certificate string of the User mapped to this address
  function getUserCaCertificate() public view returns (string memory) {
--
  ///@notice Adds a new Object to the array of objects mapped to the sender's address
  ///@param description The desired name of the Object/Document
  ///@param link The link to where the file is actually stored
  ///@param signature The Object's/Document's signature
  ///@return true, if successfully created; false if there's already an Object with the same description in this user's array
  function createObject(string memory description, string memory link, bytes32 signature) public returns(bool) {
--
  ///@notice searches for an Object and returns the corresponding link
  ///@param description the description of the object that's supposed to be found
  ///@return the link stored for the object or "" if there's no object with this description
  function getObjectLink(string memory description) public view returns(string memory) {
--
  ///@notice Finds and returns the n'th (user_document_id'th) object of the sender
  ///@param user_document_id index of the object starting at 0 for each user
  ///@return description and link of the object or ("", "") if the index does not exist
  ///@dev combine with getObjectCount() to get a list of all descriptions and links for a user as returning arrays of more than one value seems too tricky in solidity
  function getObjectById(uint user_document_id) public view returns(string memory, string memory) {
--
  ///@notice How many objects are stored for the user mapped to the sender's address?
  ///@return Amount of Objects stored for this user
  ///@dev combine with getObjectById(uint) to get a list of all descriptions and links for a user as returning arrays of more than one value seems too tricky in solidity
  function getObjectCount() public view returns(uint) {
--
  ///@notice Delete an Object from the User's list of objects
  ///@param description Description of the object that should be deleted
  ///@return true if successfully deleted, false if the description could not be found
  function invalidateObject(string memory description) public returns(bool) {
--
  ///@notice Returns the object to a description.
  ///@param description description of the object
  ///@return Object with the specified description, probably "{}" but i actually don't know because I didn't really test it
  ///@dev Not public because structs can't be returned to the outside just like that
  function getObject(string memory description) private view returns(Object memory) {
--
  ///@notice Finds and returns the index of the object in the list of objects of the right user with the specified description
  ///@param description description of the object
  ///@return index of the object or -1 if description can't be found
  function findObject(string memory description) private view returns(int) {
--
  ///@notice Compares two strings and checks if they're equal
  ///@param arg1 first string
  ///@param arg2 second string
  ///@return true if the md5 hashes of both strings match, false if not
  function streql(string memory arg1, string memory arg2) private pure returns(bool) {
